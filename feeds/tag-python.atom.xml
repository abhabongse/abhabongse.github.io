<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Personal Blog - python</title><link href="https://abhabongse.github.io/" rel="alternate"></link><link href="https://abhabongse.github.io/feeds/tag-python.atom.xml" rel="self"></link><id>https://abhabongse.github.io/</id><updated>2020-04-15T00:00:00+07:00</updated><entry><title>Advanced Generator Functions – Python Iterables Part 3 of N</title><link href="https://abhabongse.github.io/posts/python-iterables-part-3-advanced-generator-functions/" rel="alternate"></link><published>2020-04-15T00:00:00+07:00</published><updated>2020-04-15T00:00:00+07:00</updated><author><name>Abhabongse Janthong</name></author><id>tag:abhabongse.github.io,2020-04-15:/posts/python-iterables-part-3-advanced-generator-functions/</id><summary type="html">&lt;p&gt;หากผู้อ่านท่านใดเคยอ่านบทความ&lt;a href="/posts/python-iterables-part-2-prepare-your-iterables/"&gt;ตอนเก่า&lt;/a&gt;ในซีรีส์นี้
ก็คงจะเคยหมดแรงกันมาแล้ว (ผู้เขียนเองก็หอบจนหมดเวลาไปหลายเดือนอะ คิดดูสิ)&lt;/p&gt;&lt;p&gt;ในบทความนี้ ผู้เขียนเองก็จะลองนำเสนอเนื้อหาในรูปแบบใหม่&amp;hairsp;ๆ ดูบ้าง&lt;/p&gt;&lt;h2&gt;&lt;a class="headeranchor" id="bthkhwaamniicchaphuudthuengaair"&gt;&lt;/a&gt;บทความนี้จะพูดถึงอะไร&lt;a class="headerlink" href="#bthkhwaamniicchaphuudthuengaair" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href="/posts/python-iterables-part-2-prepare-your-iterables/#version-4-part-c-using-generator-function-for-adjacent_cells"&gt;ส่วนหนึ่งในบทความที่แล้ว&lt;/a&gt;
ผู้เขียนกล่าวถึงการเขียน generator …&lt;/p&gt;</summary><content type="html">&lt;p&gt;หากผู้อ่านท่านใดเคยอ่านบทความ&lt;a href="/posts/python-iterables-part-2-prepare-your-iterables/"&gt;ตอนเก่า&lt;/a&gt;ในซีรีส์นี้
ก็คงจะเคยหมดแรงกันมาแล้ว (ผู้เขียนเองก็หอบจนหมดเวลาไปหลายเดือนอะ คิดดูสิ)&lt;/p&gt;&lt;p&gt;ในบทความนี้ ผู้เขียนเองก็จะลองนำเสนอเนื้อหาในรูปแบบใหม่&amp;hairsp;ๆ ดูบ้าง&lt;/p&gt;&lt;h2&gt;&lt;a class="headeranchor" id="bthkhwaamniicchaphuudthuengaair"&gt;&lt;/a&gt;บทความนี้จะพูดถึงอะไร&lt;a class="headerlink" href="#bthkhwaamniicchaphuudthuengaair" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href="/posts/python-iterables-part-2-prepare-your-iterables/#version-4-part-c-using-generator-function-for-adjacent_cells"&gt;ส่วนหนึ่งในบทความที่แล้ว&lt;/a&gt;
ผู้เขียนกล่าวถึงการเขียน generator function ขึ้นมาใช้งานเพื่อช่วยประมวลผลชุดลำดับของข้อมูลได้อย่างมีอิสระมากขึ้น
ซึ่งได้ทั้งประสิทธิภาพการทำงานของโค้ดที่ดี (efficiency) มีความยืดหยุ่นในการใช้งาน (flexibility) 
และทำให้โค้ดแกนกลางของเราอ่านเข้าใจง่ายคล้ายภาษามนุษย์มากขึ้น (readability)&lt;/p&gt;&lt;p&gt;ในบทความนี้เราจะมาโชว์ให้ดูวิธีการเขียน generator function ที่ซับซ้อนมากขึ้น&lt;span style="padding-left: 0.8rem;"&gt;&lt;/span&gt;
แต่เราจะพูดเรื่องนามธรรมลอย&amp;hairsp;ๆ ได้ไม่ชัดเจนหากเราไม่มีตัวอย่างของโจทย์ที่จะช่วยทำให้ผู้อ่านเห็นภาพได้ง่ายขึ้น&lt;span style="padding-left: 0.8rem;"&gt;&lt;/span&gt;
ฉะนั้นแล้ว ขอแนะนำให้รู้จักกับโจทย์ตัวอย่างดังต่อไปนี้กันก่อนเลย&lt;/p&gt;&lt;h2&gt;&lt;a class="headeranchor" id="occhthy-tower-of-hanoi"&gt;&lt;/a&gt;โจทย์ Tower of Hanoi&lt;a class="headerlink" href="#occhthy-tower-of-hanoi" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href="https://th.wikipedia.org/wiki/%E0%B8%AB%E0%B8%AD%E0%B8%84%E0%B8%AD%E0%B8%A2%E0%B8%AE%E0%B8%B2%E0%B8%99%E0%B8%AD%E0%B8%A2"&gt;โจทย์ Tower of Hanoi&lt;/a&gt;
นี้เป็นโจทย์คลาสสิกที่มักใช้เพื่อสอนไอเดียพื้นฐานเกี่ยวกับความสัมพันธ์เวียนเกิด (recursion) ซึ่งเป็นพื้นฐานในการเขียนโปรแกรมอย่างหนึ่ง&lt;/p&gt;&lt;p&gt;โจทย์มีอยู่ว่าเรามีเสาอยู่ 3 ต้น โดยที่เสาที่อยู่ทางซ้ายมือจะมีแผ่นจานเสียบอยู่ &lt;span class="math-inline"&gt;n&lt;/span&gt; แผ่น
ซึ่งวางซ้อนเรียงกันจากขนาดเล็กไปหาใหญ่ ดังที่แสดงในรูปข้างล่างนี้ (ยกตัวอย่างสำหรับกรณี &lt;span class="math-inline"&gt;n = 6&lt;/span&gt;)&lt;/p&gt;&lt;img src="/images/tower-of-hanoi/hanoi-1.png" alt="Initial state of Tower of Hanoi" /&gt;&lt;p&gt;เป้าหมายของเราคือ เราต้องการย้ายแผ่นจานทั้งหมด&amp;thinsp;จากเสาที่อยู่ทางซ้ายมือ&amp;thinsp;ไปยังเสาต้นทางด้านขวามือ
โดยที่แผ่นจานทั้งหมดจะต้องวางซ้อนกันตามลำดับเดิม ดังรูปนี้&lt;/p&gt;&lt;img src="/images/tower-of-hanoi/hanoi-3.png" alt="Goal state of Tower of Hanoi" /&gt;&lt;p&gt;โดยเรามีเงื่อนไขว่า “เราสามารถย้ายแผ่นจานได้คราวละ 1 แผ่นเท่านั้น
โดยจะต้องหยิบแผ่นจานจากบนสุดของกอนจานจากเสาต้นหนึ่ง ไปวางทับบนกองจานที่อยู่ที่เสาอีกต้นหนึ่ง
และห้ามวางแผ่นจานขนาดใหญ่บนจานที่ขนาดเล็กกว่าโดยเด็ดขาด”&lt;/p&gt;&lt;img src="/images/tower-of-hanoi/hanoi-2.png" alt="Legal and illegal moves" /&gt;&lt;p&gt;หากผู้อ่านอยากลองเล่น สามารถลองค้นหา
&lt;a href="https://duckduckgo.com/?q=tower+of+hanoi"&gt;Tower of Hanoi แบบที่เป็น online game เล่นดูก่อนได้&lt;/a&gt;&lt;span style="padding-left: 0.8rem;"&gt;&lt;/span&gt;
ในบทความนี้จะไม่ขอพูดถึงวิธีการแก้ปัญหานี้&lt;label for="sidenote-7feb1bff3af0" class="margin-toggle sidenote-number"&gt;&lt;/label&gt;&lt;input type="checkbox" id="sidenote-7feb1bff3af0" class="margin-toggle"/&gt;&lt;span class="sidenote"&gt;
    มีบทความอื่น&amp;hairsp;ๆ มากมายในอินเตอร์เน็ตที่พูดถึงหัวข้อนี้ได้ดีกว่าผู้เขียนเสียอีก&lt;/span&gt;
แต่ผู้เขียนจะขอกล่าวถึงเทคนิคในการ implement recursive solution ด้วย generator function 
ซึ่งจะกล่าวเป็นลำดับถัดไป&lt;/p&gt;&lt;h3&gt;&lt;a class="headeranchor" id="1st-implementation-phimphkhamtbodytrng"&gt;&lt;/a&gt;1st Implementation:&amp;ensp;พิมพ์คำตอบโดยตรง&lt;a class="headerlink" href="#1st-implementation-phimphkhamtbodytrng" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;ก่อนอื่นเลย เราจะมาดู implementation อย่างง่ายที่สุด ซึ่งจะพิมพ์ move operation&lt;label for="sidenote-7feb1bff3a30" class="margin-toggle sidenote-number"&gt;&lt;/label&gt;&lt;input type="checkbox" id="sidenote-7feb1bff3a30" class="margin-toggle"/&gt;&lt;span class="sidenote"&gt;
    move operation หมายถึง ขั้นตอนวิธีแต่ละขั้นตอนที่เราขยับแผ่นจานจากเสาต้นหนึ่งไปสู่อีกต้นหนึ่ง&lt;/span&gt;
ออกมาอย่างละหนึ่งบรรทัดจากภายในฟังก์ชันโดยตรง&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tower_of_hanoi_v1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    Solves Tower of Hanoi problem with n discs by moving all discs &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    from the source rod to the destination rod while using &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    the auxiliary rod as the helper rod.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Move &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; to &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;tower_of_hanoi_v1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Move &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; to &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;tower_of_hanoi_v1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;tower_of_hanoi_v1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move A to B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move A to C&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move B to C&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move A to B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move C to A&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move C to B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move A to B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;แม้ว่าโค้ดข้างตันจะถูกต้องและเรียบง่าย แต่ปัญหาใหญ่เลยคือเรา&amp;hairsp;&lt;em&gt;ไม่สามารถ&lt;/em&gt;&amp;hairsp;เอาขั้นตอน move operation
ที่ใช้แก้ปัญหา Tower of Hanoi จากฟังก์ชันดังกล่าว &amp;hairsp;&lt;em&gt;ออกมาเป็นข้อมูลที่เอาไปใช้งานต่อได้&lt;/em&gt;&amp;hairsp;&lt;/p&gt;&lt;p&gt;ดังนั้นแล้วในสเต็ปถัดไปเราจะเปลี่ยน print statement ภายในฟังก์ชัน
ให้กลายเป็นการสร้างและรีเทิร์นลำดับของ move operation ทั้งหมดแทน&lt;/p&gt;&lt;h3&gt;&lt;a class="headeranchor" id="2nd-implementation-sraang-list-maatkan"&gt;&lt;/a&gt;2nd Implementation:&amp;ensp;สร้าง list มาต่อกัน&lt;a class="headerlink" href="#2nd-implementation-sraang-list-maatkan" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;ในโค้ดชุดใหม่นี้ เราจะเปลี่ยนให้ฟังก์ชัน &lt;code&gt;tower_of_hanoi&lt;/code&gt; คืนคำตอบเป็น list ของ move operation
ซึ่งเป็นคู่อันดับของเสาสองเสาว่า&amp;thinsp;จะต้องย้ายแผ่นจานจากเสาต้นใดไปยังเสาต้นใดตามลำดับ&lt;/p&gt;&lt;div class="highlight"&gt;&lt;input type="checkbox" id="140647763752608" class="highlight-checkbox-input"/&gt;&lt;label for="140647763752608" class="highlight-checkbox-label"&gt;Display Diff&lt;/label&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-delete"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tower_of_hanoi_v1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tower_of_hanoi_v2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    Solves Tower of Hanoi problem with n discs by moving all discs &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    from the source rod to the destination rod while using &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    the auxiliary rod as the helper rod.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    The result is a list of tuple pairs specifying the sequence &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    of move operations (from_rod, to_rod).&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-delete"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Move &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; to &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;ops&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-delete"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;tower_of_hanoi_v1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-delete"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Move &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; to &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-delete"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;tower_of_hanoi_v1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;ops&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tower_of_hanoi_v2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;ops&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;ops&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;tower_of_hanoi_v2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ops&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;ops&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tower_of_hanoi_v2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;ops&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;[(&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;), (&amp;#39;A&amp;#39;, &amp;#39;C&amp;#39;), (&amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;), (&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;), (&amp;#39;C&amp;#39;, &amp;#39;A&amp;#39;), (&amp;#39;C&amp;#39;, &amp;#39;B&amp;#39;), (&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ops&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Move &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; to &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move A to B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move A to C&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move B to C&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move A to B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move C to A&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move C to B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move A to B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;ดูเผิน&amp;hairsp;ๆ ว่าโค้ดใหม่นี้จะไม่มีปัญหาอะไร แต่หากเราลองวิเคราะห์โค้ดอย่างถี่ถ้วน
จะพบว่า &lt;code&gt;tower_of_hanoi_v2&lt;/code&gt; ใช้เวลารันเป็น &lt;span class="math-inline"&gt;O(n \cdot 2^n)&lt;/span&gt;
เมื่อเทียบกับโค้ดเก่าอย่าง &lt;code&gt;tower_of_hanoi_v1&lt;/code&gt; ซึ่งใช้เวลาเพียง &lt;span class="math-inline"&gt;O(2^n)&lt;/span&gt; เท่านั้น&lt;label for="sidenote-7feb1bfeb250" class="margin-toggle sidenote-number"&gt;&lt;/label&gt;&lt;input type="checkbox" id="sidenote-7feb1bfeb250" class="margin-toggle"/&gt;&lt;span class="sidenote"&gt;
    แต่หากผู้อ่านลองรันเองจริง อาจให้ผลลัพธ์ที่ต่างออกไป 
    ตรงนี้เนื่องจาก bottleneck ที่เกิดจากการเขียนข้อความลงใน standard output buffer&lt;/span&gt;&lt;span style="padding-left: 0.8rem;"&gt;&lt;/span&gt;
นั่นก็เพราะว่าการนำ list มาต่อกัน&amp;hairsp;&lt;em&gt;แต่ละครั้ง&lt;/em&gt;&amp;hairsp;มีค่าใช้จ่ายเป็นเวลาแบบเชิงเส้น (linear) ไม่ใช่ค่าคงที่ (constant)&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;ops&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tower_of_hanoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;ops&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-annotated"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;ops&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;tower_of_hanoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ops&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;เรามีทางแก้อยู่หลายวิธีด้วยกัน วิธีที่ได้ผลทันทีคือ&amp;thinsp;เราย้ายไปใช้งาน linked list แทน
ซึ่งจะมีค่าใช้จ่ายในการนำ list มาต่อกันเป็น constant&lt;span style="padding-left: 0.8rem;"&gt;&lt;/span&gt;
แต่ว่าการบริหารจัดการ linked list ในภาษา Python ไม่สามารถทำได้ง่าย&lt;/p&gt;&lt;p&gt;ดังนั้นในสเต็ปถัดไป เราจะปรับเปลี่ยนฟังก์ชันให้มีการส่ง accumulator&lt;label for="sidenote-7feb1bfeb190" class="margin-toggle sidenote-number"&gt;&lt;/label&gt;&lt;input type="checkbox" id="sidenote-7feb1bfeb190" class="margin-toggle"/&gt;&lt;span class="sidenote"&gt;
    accumulator เป็นศัพท์เทคนิคที่หมายถึงลิสต์ที่เอาไว้เก็บสะสมข้อมูล
    โดยเฉพาะอย่างยิ่งในการทำงานของ recursive function&lt;/span&gt;
ข้ามไป-มาหากันใน recursion เพื่อเก็บสะสม move operation ที่พบตามลำดับ&lt;/p&gt;&lt;h3&gt;&lt;a class="headeranchor" id="3rd-implementation-sraang-list-ekbsasm"&gt;&lt;/a&gt;3rd Implementation:&amp;ensp;สร้าง list เก็บสะสม&lt;a class="headerlink" href="#3rd-implementation-sraang-list-ekbsasm" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;ในโค้ดชุดใหม่นี้ เราจะสร้างฟังก์ชันอีกอัน ชื่อว่า &lt;code&gt;_rec_tower_of_hanoi&lt;/code&gt;
เพื่อทำ recursion แทนฟังก์ชัน &lt;code&gt;tower_of_hanoi&lt;/code&gt; หลัก
และอนุญาตให้มีการส่งต่อ accumulator ข้ามไป-มาหากันได้&lt;/p&gt;&lt;div class="highlight"&gt;&lt;input type="checkbox" id="140647763718880" class="highlight-checkbox-input"/&gt;&lt;label for="140647763718880" class="highlight-checkbox-label"&gt;Display Diff&lt;/label&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-delete"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tower_of_hanoi_v2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tower_of_hanoi_v3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    Solves Tower of Hanoi problem with n discs by moving all discs &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    from the source rod to the destination rod while using &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    the auxiliary rod as the helper rod.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    The result is a list of tuple pairs specifying the sequence &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    of move operations (from_rod, to_rod).&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;accm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;_rec_tower_of_hanoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;accm&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;_rec_tower_of_hanoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accm&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-delete"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;ops&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;accm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-delete"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;ops&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tower_of_hanoi_v2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-delete"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;ops&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-delete"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;ops&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;tower_of_hanoi_v2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;_rec_tower_of_hanoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;accm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;_rec_tower_of_hanoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;accm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;ops&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tower_of_hanoi_v3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;ops&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;[(&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;), (&amp;#39;A&amp;#39;, &amp;#39;C&amp;#39;), (&amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;), (&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;), (&amp;#39;C&amp;#39;, &amp;#39;A&amp;#39;), (&amp;#39;C&amp;#39;, &amp;#39;B&amp;#39;), (&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ops&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Move &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; to &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move A to B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move A to C&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move B to C&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move A to B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move C to A&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move C to B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move A to B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;โค้ด &lt;code&gt;tower_of_hanoi_v3&lt;/code&gt; นี้สามารถทำงานให้ผลลัพธ์ได้เหมือนกัน &lt;code&gt;tower_of_hanoi_v2&lt;/code&gt;
และมีประสิทธิภาพดีเทียบเท่า &lt;code&gt;tower_of_hanoi_v1&lt;/code&gt; ได้สำเร็จ&lt;/p&gt;&lt;p&gt;เอาล่ะ พูดมาเสียยาว แต่เรายังไม่ได้เสนอวิธีแก้ปัญหา Tower of Hanoi โดยใช้ generator function เลย&lt;span style="padding-left: 0.8rem;"&gt;&lt;/span&gt;
เรามาดูกันดีกว่าว่าหากเราต้องการให้ฟังก์ชัน &lt;code&gt;tower_of_hanoi&lt;/code&gt; รีเทิร์นลำดับของ move operation 
ออกมาเป็นวัตถุ iterable จะทำได้อย่างไร&lt;/p&gt;&lt;h3&gt;&lt;a class="headeranchor" id="4th-implementation-aich-generator-function"&gt;&lt;/a&gt;4th Implementation:&amp;ensp;ใช้ generator function&lt;a class="headerlink" href="#4th-implementation-aich-generator-function" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;เราข้ามไปดูโค้ดกันก่อนเลย&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tower_of_hanoi_v4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Any&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    Solves Tower of Hanoi problem with n discs by moving all discs &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    from the source rod to the destination rod while using &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    the auxiliary rod as the helper rod.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    The result is an iterator of tuple pairs specifying the sequence &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    of move operations (from_rod, to_rod).&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;tower_of_hanoi_v4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="k"&gt;yield from&lt;/span&gt; &lt;span class="n"&gt;tower_of_hanoi_v4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;aux&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;ops&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tower_of_hanoi_v4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;ops&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;&amp;lt;generator object tower_of_hanoi_v4 at 0x7fc0dec0ffee&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dest&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ops&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Move &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;src&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; to &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;dest&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;     &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move A to B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move A to C&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move B to C&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move A to B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move C to A&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move C to B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;Move A to B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;ฮั่นแน่&amp;hairsp;… อย่างที่สังเกตเห็น ฟังก์ชัน &lt;code&gt;tower_of_hanoi_v4&lt;/code&gt; นี้มีความคล้ายคลึงกับโค้ด 
2 เวอร์ชันแรกมากกว่าโค้ดชุดล่าสุดอย่างฟังก์ชัน &lt;code&gt;tower_of_hanoi_v3&lt;/code&gt; เสียด้วยซ้ำ&lt;/p&gt;&lt;p&gt;แต่ผู้อ่านอาจจะสงสัยว่า คำสั่ง &lt;code&gt;yield from&lt;/code&gt; ในภาษา Python คืออะไรและมีการทำงานอย่างไร&lt;span style="padding-left: 0.8rem;"&gt;&lt;/span&gt;
จะขออธิบายโดยนำคำสั่งดังกล่าวมาเปรียบเทียบกับคำสั่ง &lt;code&gt;yield&lt;/code&gt; ดังนี้&lt;/p&gt;&lt;ul&gt;&lt;li&gt;คำสั่ง &lt;code&gt;yield &amp;lt;item expression&amp;gt;&lt;/code&gt; ทำหน้าที่คืนค่าวัตถุที่เกิดจากการประมวลผล
        &lt;code&gt;&amp;lt;item expression&amp;gt;&lt;/code&gt; ออกเป็นสมาชิก&amp;hairsp;&lt;strong&gt;ค่าหนึ่ง&lt;/strong&gt;&amp;hairsp;ของ generator object&lt;/li&gt;&lt;li&gt;คำสั่ง &lt;code&gt;yield from &amp;lt;iterable expression&amp;gt;&lt;/code&gt; ทำหน้าที่คืนค่าวัตถุ&amp;hairsp;&lt;strong&gt;หลายค่า&lt;/strong&gt;&amp;hairsp;ที่เกิดจากการประมวลผล
        &lt;code&gt;&amp;lt;iterable expression&amp;gt;&lt;/code&gt; ออกมาเป็นสมาชิกของ generator object &amp;hairsp;&lt;strong&gt;ทีละตัว&lt;/strong&gt;&amp;hairsp;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;ฟังก์ชัน &lt;code&gt;tower_of_hanoi_v4&lt;/code&gt; นี้ นอกจากจะดูเรียบง่ายกว่า &lt;code&gt;tower_of_hanoi_v3&lt;/code&gt; แล้วนั้น
ยังให้ผลลัพธ์เป็น generator object ซึ่งเป็นวัตถุ iterable 
ที่มีประโยชน์ใช้สอยได้หลากหลายกว่าการที่ฟังก์ชันรีเทิร์นค่าเป็น list ดังที่เคยเล่าในบทความตอนนี้แล้ว&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tower_of_hanoi_v4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;[(&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;), (&amp;#39;A&amp;#39;, &amp;#39;C&amp;#39;), (&amp;#39;B&amp;#39;, &amp;#39;C&amp;#39;), (&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;), (&amp;#39;C&amp;#39;, &amp;#39;A&amp;#39;), (&amp;#39;C&amp;#39;, &amp;#39;B&amp;#39;), (&amp;#39;A&amp;#39;, &amp;#39;B&amp;#39;)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2&gt;&lt;a class="headeranchor" id="aebbfuekhad-occhthy-binary-tree-traversal"&gt;&lt;/a&gt;แบบฝึกหัด:&amp;ensp;โจทย์ Binary Tree Traversal&lt;a class="headerlink" href="#aebbfuekhad-occhthy-binary-tree-traversal" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&amp;hairsp;&lt;strong&gt;คำถาม:&lt;/strong&gt;&amp;hairsp; สมมติว่าเรามี Binary Tree อยู่ต้นหนึ่ง เราจะได้วัตถุ iterable ของสมาชิกแต่ละตัวภายในต้นไม้ได้อย่างไร?&lt;/p&gt;&lt;p&gt;ผู้อ่านสามารถลองทำแบบฝึกหัดนี้ง่าย&amp;hairsp;ๆ ได้ที่
[&lt;a href="https://colab.research.google.com/gist/abhabongse/30c60a12c47ebb9fac4ccc605714aa76/BinaryTreeTraversal.ipynb"&gt;ลิงก์สำหรับ Colab&lt;/a&gt;]
หรืออาจจะเข้าถึงไฟล์ Notebook โดยตรงได้ที่ [&lt;a href="https://gist.github.com/abhabongse/30c60a12c47ebb9fac4ccc605714aa76/"&gt;ลิงค์สำหรับ GitHub Gist&lt;/a&gt;]&lt;/p&gt;&lt;p&gt;(คำใบ้: เขียนไม่เกิน 5 บรรทัดต่อ 1 ฟังก์ชัน)&lt;/p&gt;&lt;p&gt;แล้วพบกันในโอกาสต่อไปครับ&lt;/p&gt;</content><category term="coding"></category><category term="python"></category><category term="iterators"></category></entry><entry><title>Prepare Your Iterables – Python Iterables Part 2 of N</title><link href="https://abhabongse.github.io/posts/python-iterables-part-2-prepare-your-iterables/" rel="alternate"></link><published>2019-07-17T00:00:00+07:00</published><updated>2019-07-17T00:00:00+07:00</updated><author><name>Abhabongse Janthong</name></author><id>tag:abhabongse.github.io,2019-07-17:/posts/python-iterables-part-2-prepare-your-iterables/</id><summary type="html">&lt;p&gt;&lt;a href="/posts/python-iterables-part-1"&gt;บทความที่แล้ว&lt;/a&gt;ได้กล่าวถึง for statement ของภาษา Python
ซึ่งจะต้องใช้งานควบคู่กับวัตถุประเภท iterable เท่านั้น&lt;/p&gt;&lt;p&gt;บทความนี้จะพูดถึงเทคนิคการจัดการกับลำดับของข้อมูล (sequence of data) ที่จะช่วยให้ for statement 
อ่านเข้าใจง่าย ดูสละสลวยขึ้น และยังม …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="/posts/python-iterables-part-1"&gt;บทความที่แล้ว&lt;/a&gt;ได้กล่าวถึง for statement ของภาษา Python
ซึ่งจะต้องใช้งานควบคู่กับวัตถุประเภท iterable เท่านั้น&lt;/p&gt;&lt;p&gt;บทความนี้จะพูดถึงเทคนิคการจัดการกับลำดับของข้อมูล (sequence of data) ที่จะช่วยให้ for statement 
อ่านเข้าใจง่าย ดูสละสลวยขึ้น และยังมีประสิทธิภาพในการทำงานที่ดีอีกด้วย&lt;/p&gt;&lt;p&gt;เราจะสนใจโจทย์ปัญหาต่อไปนี้เพื่อทำให้เรื่องราวที่จะนำเสนอเป็นรูปธรรมยิ่งขึ้น&lt;/p&gt;&lt;h2&gt;&lt;a class="headeranchor" id="payhaa-k-kaarkhamnwnhaa-local-maxima-ainkhmuultaaraangsngmiti"&gt;&lt;/a&gt;ปัญหา ก. การคำนวณหา local maxima ในข้อมูลตารางสองมิติ&lt;a class="headerlink" href="#payhaa-k-kaarkhamnwnhaa-local-maxima-ainkhmuultaaraangsngmiti" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;สมมติว่ามีข้อมูลเป็นตารางสองมิติ โดยที่แต่ละช่องมีค่าเป็นจำนวนจริง&lt;/p&gt;&lt;p&gt;&amp;hairsp;&lt;strong&gt;นิยาม:&lt;/strong&gt;&amp;hairsp; ข้อมูลในช่องหนึ่ง&amp;hairsp;ๆ จะจัดว่าเป็น &amp;hairsp;&lt;strong&gt;local maximum&lt;/strong&gt;&amp;hairsp;
    ถ้าช่องดังกล่าวมีค่า&amp;hairsp;&lt;strong&gt;มากกว่า&lt;/strong&gt;&amp;hairsp;ข้อมูลในช่องที่อยู่ติดกันในแนวตั้ง ในแนวนอน หรือในแนวทแยงมุม
    (เรียกรวม&amp;hairsp;ๆ ว่าเป็น “ช่องเพื่อนบ้าน”)&lt;/p&gt;&lt;p&gt;จงหาพิกัดของค่า local maxima ทุกช่องที่ปรากฏในข้อมูลตารางที่กำหนดให้ &amp;nbsp;
    ให้ตอบพิกัดซึ่งเป็นค่าดัชนีแนวตั้ง (row index) และแนวนอน (column index) ของแต่ละช่อง&lt;/p&gt;&lt;p&gt;&amp;hairsp;&lt;strong&gt;หมายเหตุ:&lt;/strong&gt;&amp;hairsp; maxima เป็นคำพหูพจน์ของคำว่า maximum&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;เพื่อความสะดวกและรวดเร็ว จะขอกำหนดให้ข้อมูลตารางอยู่ในรูปของ
&lt;code&gt;numpy.ndarray&lt;/code&gt;&lt;label for="sidenote-7feb1e4d7160" class="margin-toggle sidenote-number"&gt;&lt;/label&gt;&lt;input type="checkbox" id="sidenote-7feb1e4d7160" class="margin-toggle"/&gt;&lt;span class="sidenote"&gt;&lt;a href="https://www.numpy.org/devdocs/reference/arrays.ndarray.html"&gt;See reference&lt;/a&gt;&lt;/span&gt;
สองมิติ &amp;nbsp;
แต่วิธีการแก้ปัญหาที่จะนำเสนอต่อจากนี้ไป จะไม่จำเพาะเจาะจงกับไลบรารี่ &lt;code&gt;numpy&lt;/code&gt; เพียงอย่างเดียว
ผู้อ่านไม่จำเป็นต้องมีประสบการณ์ในการใช้งานไลบรารี่ดังกล่าวมาก่อนแต่อย่างใด&lt;/p&gt;&lt;p&gt;เราจะยกตัวอย่างข้อมูลตารางสองมิติ ในตัวแปรชื่อ &lt;code&gt;grid&lt;/code&gt; ซึ่งมีค่าดังต่อไปนี้&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                 &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;ข้อมูลตาราง &lt;code&gt;grid&lt;/code&gt; ในตัวอย่างข้างต้น จะมี local maxima อยู่ 3 ช่องซึ่งปรากฏอยู่ที่ตำแหน่ง
&lt;code&gt;(1, 0)&lt;/code&gt;, &lt;code&gt;(1, 2)&lt;/code&gt; และ &lt;code&gt;(3, 3)&lt;/code&gt; ตามลำดับ&lt;/p&gt;&lt;ul&gt;&lt;li&gt;ช่องตาราง &lt;code&gt;grid[1, 0]&lt;/code&gt; มีค่าเท่ากับ &lt;code&gt;8&lt;/code&gt; จัดว่าเป็น local maximum
        เพราะมีมูลค่ามากกว่าช่องเพื่อนบ้านทั้งหมดที่อยู่ติดกัน
        (อันได้แก่ &lt;code&gt;-4&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;6&lt;/code&gt;, &lt;code&gt;-3&lt;/code&gt; และ &lt;code&gt;-2&lt;/code&gt;
        เมื่อพิจารณาช่องเพื่อนบ้านแต่ละช่องเริ่มจากช่องบน วนตามเข็มนาฬิกา)&lt;/li&gt;&lt;li&gt;ช่องตาราง &lt;code&gt;grid[1, 2]&lt;/code&gt; มีค่าเท่ากับ &lt;code&gt;9&lt;/code&gt; จัดว่าเป็น local maximum อีกช่องหนึ่ง
        เพราะมีมูลค่ามากกว่าช่องเพื่อนบ้านทั้งแปดช่องที่อยู่ติดกัน
        (อันได้แก่ &lt;code&gt;-2&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;5&lt;/code&gt;, &lt;code&gt;-3&lt;/code&gt;, &lt;code&gt;6&lt;/code&gt; และ &lt;code&gt;5&lt;/code&gt;
        เมื่อพิจารณาช่องเพื่อนบ้านเริ่มจากช่องบน วนตามเข็มนาฬิกา)&lt;/li&gt;&lt;li&gt;ช่องตาราง &lt;code&gt;grid[3, 3]&lt;/code&gt; มีค่าเท่ากับ &lt;code&gt;6&lt;/code&gt; จัดว่าเป็น local maximum
        เพราะมีมูลค่ามากกว่าช่องที่อยู่ด้านบนทางซ้าย (ซึ่งมีมูลค่า &lt;code&gt;2&lt;/code&gt;),
        ช่องซ้าย (มูลค่า &lt;code&gt;4&lt;/code&gt;) และช่องบนซ้าย (มูลค่า &lt;code&gt;5&lt;/code&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;ส่วนช่องอื่น&amp;hairsp;ๆ ไม่จัดว่าเป็น local maximum เพราะอาจจะมีช่องเพื่อนบ้านบางช่องที่มีมูลค่ามากกว่าหรือเท่ากับช่องข้อมูลนั้น&amp;hairsp;ๆ&lt;/p&gt;&lt;p&gt;&amp;hairsp;&lt;strong&gt;เป้าหมาย:&lt;/strong&gt;&amp;hairsp; ต่อจากนี้ไปจะขอนำเสนอฟังก์ชันในภาษา Python ที่จะช่วยแก้ปัญหา ก. ข้างต้น
โดยเราจะเริ่มพิจารณาจากโค้ดที่ตรงไปตรงมาที่สุด (แต่อาจจะมีจุดบกพร่องบ้าง)
แล้วเราจะพยายามปรับปรุงโค้ดดังกล่าวทีละนิด จนสุดท้ายกลายเป็นโค้ดที่อ่านง่าย ดูสละสลวย และมีประสิทธิภาพที่ดี&lt;/p&gt;&lt;h3&gt;&lt;a class="headeranchor" id="version-1-naive-approach"&gt;&lt;/a&gt;Version 1 – Naïve approach&lt;a class="headerlink" href="#version-1-naive-approach" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;โค้ดต่อไปนี้นำเสนอการคำนวณ local maxima จากข้อมูลตารางโดยใช้วิธีที่ถึกอย่างตรงไปตรงมาที่สุด &amp;nbsp;
(มีคำอธิบายประกอบอยู่ด้านล่างโค้ด)&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Version 1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;local_maxima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ndarray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    Compute a list of table indices where each value is a local maximum&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    in the given table data when comparing to adjacent table cells&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    (either horizontally, vertically, or diagonally).&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="c1"&gt;# data.shape describes the number of rows and columns of the table&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;n_rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;local_maxima_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_rows&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_cols&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;  &lt;span class="c1"&gt;# invalidated by above-left cell&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;  &lt;span class="c1"&gt;# invalidated by above cell&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_cols&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;  &lt;span class="c1"&gt;# invalidated by above right cell&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;  &lt;span class="c1"&gt;# invalidated by left cell&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_cols&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;  &lt;span class="c1"&gt;# invalidated by right cell&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_rows&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;  &lt;span class="c1"&gt;# invalidated by below left cell&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_rows&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;  &lt;span class="c1"&gt;# invalidated by below cell&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_rows&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_cols&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;  &lt;span class="c1"&gt;# invalidated by below right cell&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="c1"&gt;# Append the cell if survived checks until this point&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="n"&gt;local_maxima_indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;local_maxima_indices&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;ตัวอย่างการเรียกใช้งานฟังก์ชัน &lt;code&gt;local_maxima&lt;/code&gt; (Version 1) ข้างต้น&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_maxima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;[(1, 0), (1, 2), (3, 3)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;โอ้แม่เจ้า ถึกเสียนี่กะไร! สังเกตว่าเรามี if statement ทั้งสิ้น 8 ชุดเพื่อตรวจสอบว่าค่าของแต่ละช่อง &lt;code&gt;(i, j)&lt;/code&gt;
นั้นมีค่ามากกว่าหรือเท่ากับช่องเพื่อนบ้านที่อยู่ติดกันทั้ง 8 ช่องหรือไม่ &amp;nbsp;
(โดยเริ่มต้นเช็คกับช่องเพื่อนบ้านทางมุมบนซ้าย จนไปสิ้นสุดที่ช่องที่มุมล่างขวา) &amp;nbsp;
หากผิดไปจากนี้แปลว่าค่าของช่อง &lt;code&gt;(i, j)&lt;/code&gt; จะไม่มีทางเป็น local maxima อย่างแน่นอน&lt;/p&gt;&lt;p&gt;ความเลวร้ายยังไม่หยุดแค่นั้น! ในกรณีที่ช่อง &lt;code&gt;(i, j)&lt;/code&gt; อยู่บนขอบตาราง
จะต้องระมัดระวังไม่นำค่าของช่องดังกล่าวไปเปรียบเทียบกับค่าของช่องที่หลุดขอบตารางออกไป &amp;nbsp;
เช่น ถ้า &lt;code&gt;j == 0&lt;/code&gt; แล้วจะ&amp;hairsp;&amp;hairsp;&lt;em&gt;ไม่&lt;/em&gt;&amp;hairsp;&amp;hairsp;สามารถเปรียบเทียบค่าของช่อง
&lt;code&gt;(i, j)&lt;/code&gt; กับช่อง &lt;code&gt;(i, j-1)&lt;/code&gt; ที่อยู่ทางซ้ายมือได้ &amp;nbsp;
(จึงเป็นที่มาของการตรวจเช็คเงื่อนไขในรูปของ &lt;code&gt;i &amp;gt; 0&lt;/code&gt;, &lt;code&gt;i &amp;lt; r-1&lt;/code&gt;,
&lt;code&gt;j &amp;gt; 0&lt;/code&gt; และ &lt;code&gt;j &amp;lt; c-1&lt;/code&gt; ในโค้ดข้างต้น)&lt;/p&gt;&lt;p&gt;แม้ว่าโค้ดข้างต้นนี้จะมีลอจิกที่เข้าใจง่าย แต่ก็ไม่ได้หมายความว่าจะเป็นโค้ดที่อ่านให้เข้าใจได้อย่างรวดเร็วทันทีนัก
และยังมีโอกาสเสี่ยงต่อการพิมพ์ผิดเล็ก&amp;hairsp;ๆ น้อย&amp;hairsp;ๆ อีกด้วย (เอ๊ะ? มีหรือเปล่านะ?) &amp;nbsp;
นอกจากนี้แล้วถ้าวันหนึ่งเราจะต้องเขียนฟังก์ชัน &lt;code&gt;local_minima&lt;/code&gt; ซึ่งทำงานคล้ายกับ &lt;code&gt;local_maxima&lt;/code&gt;
แต่ต้องคำนวณหาตำแหน่งของ local &amp;hairsp;&lt;em&gt;minima&lt;/em&gt;&amp;hairsp; ทั้งหมดในตารางแทนหละ &amp;nbsp;
เราจะก็อปโค้ดนี้แล้วมาแก้เครื่องหมาย &lt;code&gt;&amp;gt;=&lt;/code&gt; ให้เป็น &lt;code&gt;&amp;lt;=&lt;/code&gt; ทีละบรรทัด ก็ไม่ใช่วิธีที่สวยงามเท่าไหร่นัก&lt;/p&gt;&lt;h3&gt;&lt;a class="headeranchor" id="version-2-local-3hairspxhairsp3-grid-approach"&gt;&lt;/a&gt;Version 2 – Local 3&amp;hairsp;×&amp;hairsp;3 grid approach&lt;a class="headerlink" href="#version-2-local-3hairspxhairsp3-grid-approach" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;จุดสังเกตแรกที่จะช่วยทำให้โค้ดกระชับขึ้นก็คือ เงื่อนไขการเปรียบเทียบ &lt;code&gt;data[i, j]&lt;/code&gt; กับช่องเพื่อนบ้านที่อยู่ติดกันมี pattern ที่คล้ายคลึงกัน
(ทุกอสมการอยู่ในรูปของ &lt;code&gt;data[...] &amp;gt;= data[i, j]&lt;/code&gt;) &amp;nbsp;
เราสามารถใช้จุดสังเกตดังกล่าวมาเขียนโค้ดให้ง่ายขึ้นได้ดังนี้&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Version 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;local_maxima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ndarray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    Compute a list of table indices where each value is a local maximum&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    in the given table data when comparing to adjacent table cells&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    (either horizontally, vertically, or diagonally).&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;n_rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;local_maxima_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_rows&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_cols&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="n"&gt;is_candidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;  &lt;span class="c1"&gt;# whether (i, j) is still a valid local maximum&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-annotated"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nbr_i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-annotated"&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-annotated"&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class="c1"&gt;# Check first if neighbor (nbr_i, nbr_j) really exists&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-annotated"&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nbr_i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-annotated"&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class="k"&gt;continue&lt;/span&gt;  &lt;span class="c1"&gt;# not really a neighbor&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-annotated"&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;nbr_i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_rows&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_cols&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-annotated"&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class="k"&gt;continue&lt;/span&gt;  &lt;span class="c1"&gt;# neighbor out of bounds&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class="c1"&gt;# Comparison validation as before&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nbr_i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                        &lt;span class="n"&gt;is_candidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_candidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class="n"&gt;local_maxima_indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;local_maxima_indices&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;การเรียกใช้งานฟังก์ชัน &lt;code&gt;local_maxima&lt;/code&gt; (Version 2) ยังคงให้ผลลัพธ์เหมือนเดิม&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_maxima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;[(1, 0), (1, 2), (3, 3)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;กล่าวคือเราใช้ &lt;code&gt;(nbr_i, nbr_j)&lt;/code&gt; แทนตำแหน่งของช่องแต่ละช่องในตารางย่อย 3&amp;hairsp;×&amp;hairsp;3
ที่อยู่ในละแวกเพื่อนบ้านของช่องหลัก &lt;code&gt;(i, j)&lt;/code&gt; โดยใช้ nested for loop ชั้นที่ 3 และ 4 ในโค้ดข้างต้น&lt;/p&gt;&lt;p&gt;&amp;hairsp;&lt;strong&gt;ข้อพึงระวัง:&lt;/strong&gt;&amp;hairsp; เนื่องจากฟังก์ชัน &lt;code&gt;local_maxima&lt;/code&gt; (Version 2) ของเราจะพิจารณาตำแหน่งช่อง &lt;code&gt;(nbr_i, nbr_j)&lt;/code&gt;
ทั้งหมด 9 ช่องจากเดิมแค่ 8 ช่อง เราจึงต้องระมัดระวัง&amp;hairsp;&amp;hairsp;&lt;em&gt;ไม่&lt;/em&gt;&amp;hairsp;&amp;hairsp;นำเคสที่ &lt;code&gt;(nbr_i, nbr_j) == (i, j)&lt;/code&gt; มาพิจารณา&lt;/p&gt;&lt;h3&gt;&lt;a class="headeranchor" id="version-3-prepare-your-iterables"&gt;&lt;/a&gt;Version 3 – Prepare your iterables&lt;a class="headerlink" href="#version-3-prepare-your-iterables" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;แม้ว่าโค้ดใน Version 2 นี้จะปรับปรุงให้กระชับขึ้นมากกว่าโค้ดใน Version 1 แล้ว
แต่ก็ทำให้โค้ดบางส่วนอ่านยากขึ้น เพราะมี for statement ซ้อนกันถึง 4 ชั้นเลยทีเดียว&lt;/p&gt;&lt;p&gt;เราจะจัดการกับโค้ดเจ้าปัญหาดังกล่าวให้อ่านง่ายขึ้น 
ด้วยการ refactor ลอจิกบางส่วนออกจากฟังก์ชันหลักอย่าง &lt;code&gt;local_maxima&lt;/code&gt; ให้กลายเป็นฟังก์ชันแยกต่างหาก &amp;nbsp;
กล่าวคือเราจะมีฟังก์ชันใหม่อันหนึ่งที่เอาไว้ช่วยไล่เรียงช่อง &lt;code&gt;(i, j)&lt;/code&gt; ทุกช่องในตาราง
และอีกฟังก์ชันหนึ่งเอาไว้ช่วยไล่เรียงช่องเพื่อนบ้าน &lt;code&gt;(nbr_i, nbr_j)&lt;/code&gt; ทุกช่องที่อยู่ติดกับช่อง &lt;code&gt;(i, j)&lt;/code&gt; ที่กำหนดให้&lt;/p&gt;&lt;p&gt;โปรแกรมเวอร์ชันใหม่ของเรามีหน้าตาดังต่อไปนี้&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Version 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;local_maxima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ndarray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    Compute a list of table indices where each value is a local maximum&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    in the given table data when comparing to adjacent table cells&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    (either horizontally, vertically, or diagonally).&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;local_maxima_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-annotated"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;table_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;is_candidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-annotated"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nbr_pos&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;adjacent_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nbr_pos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class="n"&gt;is_candidate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_candidate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="n"&gt;local_maxima_indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;local_maxima_indices&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;table_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    A list of indices for all cells in a table with a given shape &lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    which is a tuple of number of rows and columns, respectively.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;n_rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_cols&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;adjacent_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;main_pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    A list of indices of all adjacent cells to the cell indicated by&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    the provided main pos, subject to the given shape of the table.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;n_rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;main_pos&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;adjacent_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nbr_i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nbr_i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;nbr_i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_rows&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_cols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class="n"&gt;adjacent_indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;nbr_i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;adjacent_indices&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;เมื่อเทียบโค้ดของฟังก์ชัน &lt;code&gt;local_maxima&lt;/code&gt; เวอร์ชันใหม่กับเวอร์ชันที่แล้ว (Version 2) มีสิ่งที่เปลี่ยนแปลงไปดังนี้&lt;/p&gt;&lt;ol&gt;&lt;li&gt;ช่อง &lt;code&gt;(i, j)&lt;/code&gt; แต่ละช่องของตารางจะถูกสร้างโดยฟังก์ชัน &lt;code&gt;table_cells&lt;/code&gt;
        แทนที่จะเขียน for statement ซ้อนกัน 2 ชั้นขึ้นมาโดยตรง&lt;/li&gt;&lt;li&gt;ช่องเพื่อนบ้าน &lt;code&gt;(nbr_i, nbr_j)&lt;/code&gt; แต่ละช่องที่อยู่ติดกับช่อง &lt;code&gt;(i, j)&lt;/code&gt; _ซึ่งไม่ตกขอบตาราง_
        จะถูกสร้างโดยฟังก์ชัน &lt;code&gt;adjacent_cells&lt;/code&gt; แทนที่จะใช้ for statement ซ้อนกันอีก 2 ชั้นผสมกับ if statement เพิ่มเติม&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;สังเกตว่าโค้ดของฟังก์ชัน &lt;code&gt;local_maxima&lt;/code&gt; (Version 3) นี้กระชับและอ่านง่ายขึ้นกว่าเดิม 
เราสามารถมองเห็น intention ของฟังก์ชันได้จากโค้ดโดยตรง โดยเราไม่จำเป็นต้องมานั่งตีความอีกต่อไปว่า 
for statement ที่ซ้อนกันแต่ละชั้น มีจุดประสงค์เอาไว้ทำงานอะไรบ้าง&lt;/p&gt;&lt;p&gt;นอกจากนั้น ฟังก์ชัน &lt;code&gt;table_cells&lt;/code&gt; และ &lt;code&gt;adjacent_cells&lt;/code&gt; ที่แยกออกมานั้น
สามารถนำไปใช้ประโยชน์ซ้ำในโอกาสอื่น&amp;hairsp;ๆ ได้
(เช่น นำไปใช้เขียนฟังก์ชัน &lt;code&gt;local_minima&lt;/code&gt; เป็นต้น)&lt;/p&gt;&lt;p&gt;เมื่อเราลองใช้งาน &lt;code&gt;local_maxima&lt;/code&gt; (Version 3) ก็พบว่าโปรแกรมยังให้ผลลัพธ์เหมือนเดิม&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;local_maxima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;[(1, 0), (1, 2), (3, 3)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;เอาหละ! มาพักหายใจกันแป๊บหนึ่ง เดี๋ยวมาดูกันว่าเราจะทำให้โค้ด Version 3 ข้างต้นให้ดียิ่งขึ้นได้อย่างไรบ้าง&lt;/p&gt;
    &lt;div style="margin: 1.5em"&gt;&lt;/div&gt;
    &lt;center&gt;[insert elevator song here]&lt;/center&gt;
    &lt;div style="margin: 2.5em"&gt;&lt;/div&gt;
&lt;h3&gt;&lt;a class="headeranchor" id="version-4-hairsppart-a-improving-main-function"&gt;&lt;/a&gt;Version 4 &amp;hairsp;Part A. Improving main function&lt;a class="headerlink" href="#version-4-hairsppart-a-improving-main-function" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;เราจะใช้เครื่องมือบางอย่างที่ Python จัดเตรียมไว้เพื่อทำให้ฟังก์ชัน &lt;code&gt;local_maxima&lt;/code&gt; สั้นลงกว่าเดิม &amp;nbsp;
มาพิจารณาโค้ดเวอร์ชันใหม่นี้กันเลย&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Version 4a&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;local_maxima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ndarray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    Compute a list of table indices where each value is a local maximum&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    in the given table data when comparing to adjacent table cells&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    (either horizontally, vertically, or diagonally).&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;local_maxima_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;table_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-annotated"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nbr_pos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-annotated"&gt;&lt;td&gt;&lt;pre&gt;               &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nbr_pos&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;adjacent_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="n"&gt;local_maxima_indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;local_maxima_indices&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;เมื่อพิจารณาฟังก์ชัน &lt;code&gt;local_maxima&lt;/code&gt; เวอร์ชันล่าสุดนี้เทียบกับ Version 3
จะพบว่าเราได้ย้าย for statement ชั้นในสำหรับตัวแปร &lt;code&gt;nbr_pos&lt;/code&gt; เข้าไปอยู่ภายใน generator expression ต่อไปนี้&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# This portion of the code is a generator expression&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nbr_pos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nbr_pos&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;adjacent_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;จากนั้น generator expression ดังกล่าวก็ถูกป้อนเป็น input argument ของฟังก์ชัน &lt;code&gt;all&lt;/code&gt;
(ซึ่งเป็นฟังก์ชันที่สามารถเรียกใช้งานได้โดยไม่จำเป็นต้อง &lt;code&gt;import&lt;/code&gt; ก่อน)&lt;/p&gt;&lt;p&gt;&amp;hairsp;&lt;strong&gt;หมายเหตุ:&lt;/strong&gt;&amp;hairsp; หากพิจารณา &lt;a href="https://docs.python.org/3/library/functions.html#all"&gt;documentation&lt;/a&gt; 
ของฟังก์ชัน &lt;code&gt;all&lt;/code&gt;
จะพบว่า input argument สามารถเป็นวัตถุ iterable ใดก็ได้ รวมถึง generator expression ที่เราเขียนไว้ข้างต้นด้วย&lt;/p&gt;&lt;p&gt;สิ่งที่น่าสนใจเกี่ยวกับโค้ด Version 4&amp;hairsp;a นี้ก็คือ เมื่ออ่านตาม syntax ของโค้ดข้างต้นจะได้ความว่า&lt;/p&gt;&lt;blockquote&gt;“ให้พิจารณาช่อง &lt;code&gt;pos&lt;/code&gt; แต่ละตำแหน่งในตาราง
    แล้วหาว่ามีช่องใดบ้างที่มีค่ามากกว่าช่องเพื่อนบ้าน &lt;code&gt;nbr_pos&lt;/code&gt; ทุกช่อง”&lt;/blockquote&gt;&lt;p&gt;ซึ่งมีความหมายสอดคล้องและคล้ายคลึงกับนิยามของโจทย์ที่กำหนดไว้ในช่วงต้นของบทความนี้อย่างมาก&lt;/p&gt;&lt;h3&gt;&lt;a class="headeranchor" id="version-4-hairsppart-b-using-generator-expression-with-table_cells"&gt;&lt;/a&gt;Version 4 &amp;hairsp;Part B. Using generator expression with table_cells&lt;a class="headerlink" href="#version-4-hairsppart-b-using-generator-expression-with-table_cells" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;ในฟังก์ชัน &lt;code&gt;local_maxima&lt;/code&gt; (Version 3) สังเกตว่าเราเรียกใช้ฟังก์ชัน &lt;code&gt;table_cells&lt;/code&gt; (Version 3)
ซึ่งให้ผลลัพธ์ออกมาเป็น &lt;code&gt;list&lt;/code&gt; ของตำแหน่งทุกช่องในตาราง &amp;nbsp;
แล้วจากนั้นเราจึงไล่ดูช่องตารางทีละช่องโดยจาก list ดังกล่าวโดยใช้ for statement&lt;/p&gt;&lt;p&gt;แต่&lt;a href="python-iterables-part-1.paxter"&gt;จากบทความที่แล้ว&lt;/a&gt;เราได้กล่าวไว้ว่า
วัตถุที่ใช้คู่กับ for statement สามารถเป็นวัตถุ iterable ใดก็ได้ ไม่จำเป็นต้องเป็นโครงสร้างข้อมูลอย่างเช่น list เสมอไป &amp;nbsp;
ฉะนั้นแล้วเราจะลองแก้ไขฟังก์ชัน &lt;code&gt;table_cells&lt;/code&gt; ให้รีเทิร์นค่าออกมาเป็นวัตถุ iterator 
โดยเปลี่ยนจาก list comprehension ให้กลายเป็น &amp;hairsp;&lt;strong&gt;generator expression&lt;/strong&gt;&amp;hairsp; ซึ่งออกมาเป็นโค้ดดังต่อไปนี้&lt;/p&gt;&lt;div class="highlight"&gt;&lt;input type="checkbox" id="140647802456576" class="highlight-checkbox-input"/&gt;&lt;label for="140647802456576" class="highlight-checkbox-label"&gt;Display Diff&lt;/label&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Version 4 Part B&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-delete"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;table_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;table_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    An iterator of indices for all cells in a table with a given shape&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    which is a tuple of number of rows and columns, respectively.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;n_rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-delete"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_cols&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_cols&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;แล้วการเขียนฟังก์ชันที่รีเทิร์นค่าเป็นวัตถุ iterator มันดีกว่าการสร้าง list โดยตรงอย่างไรบ้างในสถานการณ์เช่นนี้?&lt;/p&gt;&lt;div id="anchor-iterator-to-list"&gt;&lt;/div&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;ฟังก์ชันที่สร้างวัตถุ iterator นั้น&amp;hairsp;&lt;strong&gt;ให้อิสระแก่ผู้เรียกใช้งานฟังก์ชัน&lt;/strong&gt;&amp;hairsp;มากกว่าการสร้าง list
        นั่นเพราะว่าเราสามารถแปลงวัตถุ iterator ดังกล่าวให้กลายเป็น list ได้ด้วยการแคสด้วย
        &lt;code&gt;list&lt;/code&gt; constructor ได้เสมอ
        (&lt;code&gt;list&lt;/code&gt; จะแปลงข้อมูล iterable ใด&amp;hairsp;ๆ ที่รับมาให้กลายเป็น list ตามที่ระบุไว้ใน
        &lt;a href="https://docs.python.org/3/library/functions.html#func-list"&gt;documentation&lt;/a&gt;)&lt;/p&gt;&lt;p&gt;ยกตัวอย่างเช่น&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;table_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;&amp;lt;generator object table_cells.&amp;lt;locals&amp;gt;.&amp;lt;genexpr&amp;gt; at 0x7fc0dec0ffee&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;เมื่อพิจารณาในกรณีที่โปรแกรมเราใช้งาน for statement กับวัตถุ iterable
        เพื่อ&amp;hairsp;&lt;strong&gt;ประมวลผลสมาชิกเพียงครั้งละ 1 ตัวเท่านั้น&lt;/strong&gt;&amp;hairsp;
        (ดังเช่นที่เกิดขึ้นภายในฟังก์ชัน &lt;code&gt;local_maxima&lt;/code&gt; Version 3
        ซึ่งเราจะพิจารณาช่องตารางเพียงทีละ 1 ช่องเท่านั้น)&lt;/p&gt;&lt;p&gt;หมายความว่าเราไม่จำเป็นต้องคำนวณตำแหน่งของช่องตารางทุกช่องไว้ล่วงหน้าทั้งหมด
        ซึ่งยังมีผลให้เปลืองพื้นที่หน่วยความจำเพื่อเก็บลำดับของช่องตารางทั้งหมดดังกล่าวอีกด้วย
        (ลองคิดดูว่าหากข้อมูลตารางมีขนาดใหญ่เช่น &lt;span class="math-inline"&gt;10,\!000 \times 10,\!000&lt;/span&gt;
        เราจะเสียพื้นที่ไปกี่ MB โดยไม่มีเหตุจำเป็น)&lt;/p&gt;&lt;p&gt;ฉะนั้นแล้วเราเลือกที่จะ&amp;hairsp;&amp;hairsp;&lt;em&gt;ไม่สร้างลำดับ&lt;/em&gt;&amp;hairsp;&amp;hairsp;ของช่องตารางทั้งหมดไว้ล่วงหน้า
        แต่จะค่อย&amp;hairsp;ๆ สร้างลำดับดังกล่าวอย่าง&amp;hairsp;&lt;strong&gt;ขี้เกียจ&lt;/strong&gt;&amp;hairsp;ที่สุด
        (เรียกว่าเป็น &amp;hairsp;&lt;strong&gt;lazily constructed sequence&lt;/strong&gt;&amp;hairsp;) &amp;nbsp;
        กล่าวคือเราจะคำนวณสมาชิกตัวถัดไปของลำดับนี้ก็ต่อเมื่อถึงเวลาที่
        for statement ขอเรียกดูสมาชิกตัวดังกล่าวไปประมวลผลเท่านั้น
        ซึ่งการเขียน generator expression ก็เป็นหนึ่งวิธีที่จะสร้าง lazily constructed sequence อย่างที่ปรารถนาได้&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&amp;hairsp;&lt;strong&gt;บทแทรก:&lt;/strong&gt;&amp;hairsp; ข้อตกลง (convention) ของภาษา Python กำหนดไว้ว่า
วัตถุประเภท iterator ถือว่าเป็น iterable ชนิดหนึ่งที่สามารถไล่เรียกดูสมาชิกทุกตัวได้เพียง&amp;hairsp;&lt;strong&gt;รอบเดียว&lt;/strong&gt;&amp;hairsp;เท่านั้น &amp;nbsp;
(เพราะในทางเทคนิคแล้ว method ชื่อ &lt;code&gt;__iter__(self)&lt;/code&gt; มักจะรีเทิร์น &lt;code&gt;self&lt;/code&gt; ออกมาโดยตรง
ทำให้ไม่เกิด iterator อันใหม่สำหรับวัตถุที่เป็น iterator อยู่แล้วแต่แรก) &amp;nbsp;
ผู้ใช้งานจึงควรระมัดระวังการใช้งานวัตถุ iterator ซ้ำกันเกิน 1 รอบ ยกตัวอย่างเช่น&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;table_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# iterator has previously been fully consumed&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;[]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;&amp;hairsp;&lt;strong&gt;หมายเหตุ:&lt;/strong&gt;&amp;hairsp; อันที่จริงแล้ว เราอาจเรียกใช้ฟังก์ชัน
&lt;code&gt;numpy.ndindex(*shape)&lt;/code&gt;&lt;label for="sidenote-7feb1e4df220" class="margin-toggle sidenote-number"&gt;&lt;/label&gt;&lt;input type="checkbox" id="sidenote-7feb1e4df220" class="margin-toggle"/&gt;&lt;span class="sidenote"&gt;&lt;a href="https://www.numpy.org/devdocs/reference/generated/numpy.ndindex.html"&gt;See reference&lt;/a&gt;&lt;/span&gt;
แทนการสร้างและเรียกใช้งานฟังก์ชัน &lt;code&gt;table_cells(shape)&lt;/code&gt; ก็ได้&lt;/p&gt;&lt;h3&gt;&lt;a class="headeranchor" id="version-4-hairsppart-c-using-generator-function-for-adjacent_cells"&gt;&lt;/a&gt;Version 4 &amp;hairsp;Part C. Using generator function for adjacent_cells&lt;a class="headerlink" href="#version-4-hairsppart-c-using-generator-function-for-adjacent_cells" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;เมื่อสักครู่เราแก้ไขฟังก์ชัน &lt;code&gt;table_cells&lt;/code&gt; จากเดิมที่รีเทิร์นค่าเป็น list ให้กลายเป็นวัตถุ iterator ใน Version 4&amp;hairsp;b กันไปแล้ว &amp;nbsp;
เราจะนำไอเดียเดียวกันนี้มาประยุกต์ใช้กับฟังก์ชัน &lt;code&gt;adjacent_cells&lt;/code&gt; ดูบ้าง &amp;nbsp;
แต่ถ้าจะเปลี่ยนโค้ดของ &lt;code&gt;adjacent_cells&lt;/code&gt; ให้หันมาใช้ generator expression ก็คงยุ่งยากวุ่นวายเกินไป &amp;nbsp;
ดังนั้นเราจะใช้ความสามารถอีกอย่างหนึ่งของภาษา Python นั่นก็คือ &amp;hairsp;&lt;strong&gt;generator function&lt;/strong&gt;&amp;hairsp;&lt;/p&gt;&lt;p&gt;เราจะข้ามไปดูโค้ดเวอร์ชันใหม่ของ &lt;code&gt;adjacent_cells&lt;/code&gt; กันเลย&lt;/p&gt;&lt;div class="highlight"&gt;&lt;input type="checkbox" id="140647802467712" class="highlight-checkbox-input"/&gt;&lt;label for="140647802467712" class="highlight-checkbox-label"&gt;Display Diff&lt;/label&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Version 4 Part C&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;adjacent_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;main_pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-delete"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    An iterator of indices of all adjacent cells to the cell indicated by&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    the provided main pos, subject to the given shape of the table.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;n_rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;main_pos&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-delete"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;adjacent_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;     &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nbr_i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nbr_i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;nbr_i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_rows&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_cols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-delete"&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class="n"&gt;adjacent_indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;nbr_i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;nbr_i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;สิ่งที่เปลี่ยนไปจากโค้ดเดิมคือ
1. เราลบโค้ดส่วนที่เกี่ยวข้องกับลิสต์ &lt;code&gt;adjacent_indices&lt;/code&gt; ออก และ 
2. แทนที่เราจะ append ค่าของ &lt;code&gt;(nbr_i, nbr_j)&lt;/code&gt; ยัดลงใน list เราเลือกใช้ &lt;code&gt;yield&lt;/code&gt; statement เพื่อคืนค่าตำแหน่งเหล่านั้นทีละตัวแทน&lt;/p&gt;&lt;p&gt;“แล้วคำสั่ง &lt;code&gt;yield&lt;/code&gt; มันทำอะไร?”&amp;nbsp; อธิบายโดยคร่าวคือ&lt;/p&gt;&lt;ul&gt;&lt;li&gt;เมื่อ&amp;hairsp;&amp;hairsp;&lt;em&gt;ฟังก์ชัน&lt;/em&gt;&amp;hairsp;&amp;hairsp;ใดก็ตามมี keyword คำว่า &lt;code&gt;yield&lt;/code&gt; ปรากฏอยู่
        จะทำให้ฟังก์ชันดังกล่าวนั้นกลายร่างเป็น “generator function” ในทันที&lt;/li&gt;&lt;li&gt;&lt;p&gt;การเรียกใช้งาน generator function จะให้ผลลัพธ์เป็น “generator object” ซึ่งจัดเป็นวัตถุ iterator ชนิดหนึ่ง
        แต่ว่า body ของฟังก์ชันดังกล่าวจะ&amp;hairsp;&amp;hairsp;&lt;em&gt;ยังไม่เริ่มทำงาน&lt;/em&gt;&amp;hairsp;&amp;hairsp;ในทันที&lt;/p&gt;&lt;p&gt;&amp;hairsp;&lt;strong&gt;หมายเหตุ:&lt;/strong&gt;&amp;hairsp; อันที่จริงแล้วเมื่อเรารัน generator expression
        (ดังเช่นในฟังก์ชัน &lt;code&gt;table_cell&lt;/code&gt; Version 4–B)
        ก็จะได้ผลลัพธ์เป็น generator object เช่นเดียวกัน&lt;/p&gt;&lt;/li&gt;&lt;li&gt;เมื่อมีการ&amp;hairsp;&amp;hairsp;&lt;em&gt;เริ่ม&lt;/em&gt;&amp;hairsp;&amp;hairsp;ไล่เรียกดูสมาชิกแต่ละตัวของวัตถุ generator/iterator &amp;nbsp;
        (ไม่ว่าจะเกิดจากการใช้งานวัตถุดังกล่าวกับ for statement หรือด้วยกระบวนการอื่นใดก็ตาม) &amp;nbsp;
        แล้ว generator function ดังกล่าวจึงจะ&amp;hairsp;&amp;hairsp;&lt;em&gt;เริ่ม&lt;/em&gt;&amp;hairsp;&amp;hairsp;ทำงาน&lt;/li&gt;&lt;li&gt;และทุก&amp;hairsp;ๆ ครั้งที่ generator function ทำงานถึงบรรทัดคำสั่ง &lt;code&gt;yield&lt;/code&gt;
        ค่าของ&lt;abbr title="expression"&gt;นิพจน์&lt;/abbr&gt;ใน yield statement
        จะถูกรีเทิร์นออกไปเป็นหนึ่งค่าของวัตถุ generator/iterator &amp;nbsp;
        ส่วน generator function นี้จะ&amp;hairsp;&lt;strong&gt;หยุดการทำงานชั่วคราว&lt;/strong&gt;&amp;hairsp;
        จนกว่าจะมี&amp;hairsp;&lt;strong&gt;การเรียกขอดูค่าถัดไป&lt;/strong&gt;&amp;hairsp;ของวัตถุ generator/iterator นี้&lt;/li&gt;&lt;li&gt;วัตถุ generator/iterator จะสิ้นสุดลงก็ต่อเมื่อเกิดจากรีเทิร์นออกจากฟังก์ชัน
        (ไม่ว่าจะด้วย return statement หรือว่าฟังก์ชันถูกรันจนจบถึงบรรทัดสุดท้ายก็ตาม)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;ดังนั้นแล้ว ฟังก์ชัน &lt;code&gt;adjacent_cells&lt;/code&gt; (Version 4&amp;hairsp;c) นี้ก็จะสร้างวัตถุ iterator
ซึ่งจะไล่เรียงช่องเพื่อนบ้านทุกอย่างที่อยู่ติดกับช่อง &lt;code&gt;main_pos&lt;/code&gt; ที่รับเข้ามาเป็นข้อมูลนำเข้า
ออกมาทีละช่องผ่านคำสั่ง &lt;code&gt;yield&lt;/code&gt; &amp;nbsp;
นับว่าเป็น lazily constructed sequence เช่นเดียวกับฟังก์ชัน &lt;code&gt;table_cells&lt;/code&gt; (Version 4&amp;hairsp;b)&lt;/p&gt;&lt;h3&gt;&lt;a class="headeranchor" id="summary-of-version-4"&gt;&lt;/a&gt;Summary of Version 4&lt;a class="headerlink" href="#summary-of-version-4" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;เรานำโค้ด Version 4 ของทั้งสามฟังก์ชันมาประกอบรวมกัน กลายเป็นโปรแกรมดังต่อไปนี้&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Version 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;local_maxima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ndarray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    Compute a list of table indices where each value is a local maximum&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    in the given table data when comparing to adjacent table cells&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    (either horizontally, vertically, or diagonally).&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;local_maxima_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;table_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nbr_pos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;               &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nbr_pos&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;adjacent_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="n"&gt;local_maxima_indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;local_maxima_indices&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;table_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    An iterator of indices for all cells in a table with a given shape&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    which is a tuple of number of rows and columns, respectively.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;n_rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_cols&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;adjacent_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;main_pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    An iterator of indices of all adjacent cells to the cell indicated by&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    the provided main pos, subject to the given shape of the table.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;n_rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;main_pos&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nbr_i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nbr_i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;nbr_i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_rows&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_cols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;nbr_i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
    &lt;div style="margin: 2.5em"&gt;&lt;/div&gt;
    &lt;center&gt;[insert bogo advert here]&lt;/center&gt;
    &lt;div style="margin: 3.5em"&gt;&lt;/div&gt;
&lt;p&gt;ช่วงโปรโมชันพิเศษ เราขอแถมโจทย์ปัญหาอีก 1 ข้อ&lt;/p&gt;&lt;h2&gt;&lt;a class="headeranchor" id="payhaa-kh-taaraangsngmitimii-local-maximum-yaangnyhnuengchnghruueaim"&gt;&lt;/a&gt;ปัญหา ข. ตารางสองมิติมี local maximum อย่างน้อยหนึ่งช่องหรือไม่&lt;a class="headerlink" href="#payhaa-kh-taaraangsngmitimii-local-maximum-yaangnyhnuengchnghruueaim" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;สมมติว่ามีข้อมูลเป็นตารางสองมิติ โดยที่แต่ละช่องมีค่าเป็นจำนวนจริง&lt;/p&gt;&lt;p&gt;จงหาว่าในข้อมูลตารางนี้ มีช่องอย่างน้อน 1 ช่องที่มีค่าเป็น local maximum หรือไม่
    โดยให้ตอบเป็นค่าบูลีน &lt;code&gt;True&lt;/code&gt; หรือ &lt;code&gt;False&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&amp;hairsp;&lt;strong&gt;หมายเหตุ:&lt;/strong&gt;&amp;hairsp; โปรดสังเกตว่า มีกรณีที่คำตอบของคำถามข้างนี้สามารถเป็น &lt;code&gt;False&lt;/code&gt;
    เช่น ในกรณีที่ตารางมีขนาดใหญ่กว่า 1&amp;hairsp;×&amp;hairsp;1 และทุกช่องในตารางมีค่าเท่ากัน&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;สังเกตว่าปัญหา ข. นี้ถามหา “existence of a solution”
ซึ่งเป็นเพียง &amp;hairsp;&lt;em&gt;corollary&lt;/em&gt;&amp;hairsp; ของปัญหา ก. ดั้งเดิมที่ให้ “enumerate all solutions” เท่านั้นเอง&lt;/p&gt;&lt;p&gt;สมมติว่ามีข้อมูลตารางอยู่ในตัวแปรชื่อ &lt;code&gt;table&lt;/code&gt; แล้วต้องการค้นหาว่า &lt;code&gt;table&lt;/code&gt; 
มี local maximum อย่างน้อยหนึ่งช่องหรือไม่ &amp;nbsp;
เราสามารถแก้ปัญหาง่าย&amp;hairsp;ๆ ได้ดังนี้&lt;/p&gt;&lt;p&gt;1. สั่งรัน &lt;code&gt;local_maxima(table)&lt;/code&gt; เพื่อคำนวณหาลิสต์ของ local maxima ทั้งหมดของข้อมูลในตัวแปร &lt;code&gt;table&lt;/code&gt;
2. ตรวจสอบว่าผลลัพธ์จากข้อที่แล้ว เป็นสิลต์ที่มีความยาวอย่างน้อย 1 หรือไม่&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Note: In Python, a list evaluates to True under an if statement&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="c1"&gt;# if and only if the list is non-empty.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;local_maxima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# from version 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The table contains at least 1 local maximum.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The table has no local maxima.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;แต่ประสิทธิภาพของวิธีการแก้ปัญหาข้างต้นนี้ยังไม่เป็นที่น่าพอใจ &amp;nbsp;
กล่าวคือโจทย์ข้อนี้เราต้องการทราบแค่ว่า &amp;nbsp;“มี&amp;hairsp;&lt;strong&gt;คำตอบอย่างน้อย 1 ช่อง&lt;/strong&gt;&amp;hairsp;หรือไม่”&amp;nbsp; เพียงแค่นั้น
แต่ฟังก์ชัน &lt;code&gt;local_maxima&lt;/code&gt; ที่เราเรียกใช้งานกลับรีเทิร์นค่าเป็น &amp;nbsp;“ลิสต์ของ&amp;hairsp;&lt;strong&gt;คำตอบทั้งหมด&lt;/strong&gt;&amp;hairsp;”&amp;nbsp;
ซึ่งเป็นข้อมูลที่ &amp;hairsp;&lt;em&gt;มากเกินความจำเป็น&lt;/em&gt;&amp;hairsp; ในการตอบคำถาม&lt;/p&gt;&lt;p&gt;จะดีหรือไม่ หากเราสามารถควบคุมการทำงานฟังก์ชัน &lt;code&gt;local_maxima&lt;/code&gt; สร้างลำดับของช่องตารางที่เป็น local maximum 
ที่มีลักษณะเป็น lazily constructed sequence เช่นเดียวกับฟังก์ชัน &lt;code&gt;table_cells&lt;/code&gt; และ &lt;code&gt;adjacent_cells&lt;/code&gt; &amp;nbsp;
(หมายความว่า ช่องตารางที่มีค่าเป็น local maximum แต่ละช่องจะถูกคำนวณก็ต่อเมื่อถึงเวลาที่ช่องดังกล่าวถูกเรียกดูเท่านั้น)&lt;/p&gt;&lt;h3&gt;&lt;a class="headeranchor" id="version-5-changing-return-type-of-main-function"&gt;&lt;/a&gt;Version 5 – Changing return type of main function&lt;a class="headerlink" href="#version-5-changing-return-type-of-main-function" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;ก่อนที่จะพูดถึงจุดประสงค์ในการดัดแปลงฟังก์ชัน &lt;code&gt;local_maxima&lt;/code&gt; ให้รีเทิร์นค่าวัตถุ iterator แทนที่จะเป็น &lt;code&gt;list&lt;/code&gt; แบบเก่า
เราจะไปดูโค้ดที่มีการแก้ไขกันก่อน&lt;/p&gt;&lt;div class="highlight"&gt;&lt;input type="checkbox" id="140647802476336" class="highlight-checkbox-input"/&gt;&lt;label for="140647802476336" class="highlight-checkbox-label"&gt;Display Diff&lt;/label&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Version 5 (new function signature)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-delete"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;local_maxima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ndarray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;List&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;local_maxima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ndarray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    An iterator of table indices where each value is a local maximum&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    in the given table data when comparing to adjacent table cells&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    (either horizontally, vertically, or diagonally).&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-delete"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;local_maxima_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;table_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nbr_pos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;               &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nbr_pos&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;adjacent_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-delete"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="n"&gt;local_maxima_indices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-insert"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-delete"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;local_maxima_indices&lt;/span&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="c1"&gt;# table_cells and adjacent_cells remain unchanged&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;เราดัดแปลงให้ฟังก์ชัน &lt;code&gt;local_maxima&lt;/code&gt; กลายเป็น generator function ใน Version 5 นี้
(ด้วยกระบวนการที่คล้ายกับการดัดแปลงฟังก์ชัน &lt;code&gt;adjacent_cells&lt;/code&gt; ใน Version 4&amp;hairsp;c)&lt;/p&gt;&lt;p&gt;&amp;hairsp;&lt;strong&gt;หมายเหตุ:&lt;/strong&gt;&amp;hairsp; อย่าลืมว่าถ้าเราต้องการผลลัพธ์เป็นลิสต์แบบเก่า เราก็เพียงแค่นำวัตถุ iterator ไปใส่ใน
list constructor ได้&lt;a href="#anchor-iterator-to-list"&gt;ดังที่เคยกล่าวไปแล้ว&lt;/a&gt;&lt;/p&gt;&lt;p&gt;แล้วการทำให้ฟังก์ชัน &lt;code&gt;local_maxima&lt;/code&gt; รีเทิร์นเป็นวัตถุ iterator จะช่วยให้ตอบปัญหา ข. อย่างมีประสิทธิภาพได้อย่างไร? &amp;nbsp;
ลองพิจารณาจิ๊กซอว์สองชิ้นนี้&lt;/p&gt;&lt;ul&gt;&lt;li&gt;เราต้องการทราบเพียงแค่ว่าตารางข้อมูลสองมิติที่กำหนดให้ มี local maximum อย่างน้อย 1 ช่องหรือไม่ &amp;nbsp;
        นั่นแปลว่าหากเราพบ local maximum ช่องแรกของตารางแล้ว
        ค่า local maximum ที่เหลือในตารางก็ไม่มีนัยยะสำคัญอีกต่อไปนี้&lt;/li&gt;&lt;li&gt;ฟังก์ชัน &lt;code&gt;local_maxima&lt;/code&gt; (Version 5) เป็น generator function ที่จะค้นหาตำแหน่งของ local maximum
        ในข้อมูลตารางที่รับเป็นข้อมูลนำเข้า เพียงทีละ 1 ช่องเท่านั้น &amp;nbsp;
        และจะมีหยุดการทำงานชั่วคราวจนกว่าจะมีการขอให้ดำเนินการค้นหา local maximum ตัวถัดไป&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;ดังนั้นแล้ว เราขอตั้งปัญหาในรูปทั่วไปดังต่อไปนี้&lt;/p&gt;&lt;hr /&gt;&lt;h3&gt;&lt;a class="headeranchor" id="payhaayy-trwcchsbwaawatthu-iterable-aimwaangeplaa"&gt;&lt;/a&gt;ปัญหาย่อย: ตรวจสอบว่าวัตถุ iterable ไม่ว่างเปล่า&lt;a class="headerlink" href="#payhaayy-trwcchsbwaawatthu-iterable-aimwaangeplaa" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h3&gt;&lt;blockquote&gt;เราจะสามารถตรวจสอบว่าวัตถุ iterable ใด&amp;hairsp;ๆ มีสมาชิกอย่างน้อย 1 ตัวหรือไม่ ได้อย่างไร
    โดยไม่จำเป็นต้องพยายามไล่ดูสมาชิกของวัตถุ iterable เกิน 1 ตัว&lt;/blockquote&gt;&lt;p&gt;เราสามารถเขียน &amp;hairsp;&lt;em&gt;รูปแบบนิพจน์&lt;/em&gt;&amp;hairsp; &lt;code&gt;any(True for _ in iterable)&lt;/code&gt;
เพื่อทดสอบว่าวัตถุ &lt;code&gt;iterable&lt;/code&gt; ในนิพจน์ดังกล่าวมีสมาชิกอย่างน้อย 1 ตัวหรือไม่ได้ &amp;nbsp;
รูปแบบนิพจน์ดังกล่าวอาศัยความสามารถ short-circuiting ของฟังก์ชัน &lt;code&gt;any&lt;/code&gt; เพื่อยุติการทำงานเมื่อทราบผลลัพธ์เป็นที่แน่นอนแล้ว
(โปรดดู &lt;a href="https://docs.python.org/3/library/functions.html#any"&gt;documentation&lt;/a&gt; ประกอบ) &amp;nbsp;
ยกตัวอย่างเช่น&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;odd_digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;odd_digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;even_digits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;even_digits&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;empty_sequence&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;empty_sequence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;sequence_of_false&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;sequence_of_false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;มีคำถาม 2 คำถามที่อาจเป็นที่สนใจ แต่จะขออนุญาตทิ้งไว้ให้เป็นคำถามชวนคิดด้วยตนเอง&lt;/p&gt;&lt;ol&gt;&lt;li&gt;ทำไมเราจึงไม่ใช้รูปแบบนิพจน์ &lt;code&gt;any(iterable)&lt;/code&gt; ไปเลย
        แต่กลับใช้รูปแบบนิพจน์ &lt;code&gt;any(True for _ in iterable)&lt;/code&gt; แทน?&lt;/li&gt;&lt;li&gt;เราจะออกแบบการทดลองอย่างไร จึงจะทำให้มั่นใจได้ว่ารูปแบบนิพจน์ &lt;code&gt;any(True for _ in iterable)&lt;/code&gt;
        จะยุติการทำงานทันทีหลังจากที่วัตถุ iterable ปล่อยค่าสมาชิกตัวแรกออกมาแล้ว?&lt;/li&gt;&lt;/ol&gt;&lt;hr /&gt;&lt;p&gt;มาพิจารณาปัญหา ข. กันอีกครั้งหนึ่ง นั่นคือเราอยากทราบว่าข้อมูลตารางที่กำหนดให้มี local maximum อย่างน้อย 1 ช่องหรือไม่? &amp;nbsp;
แต่ในคราวนี้ เรามีเครื่องมือพร้อมที่จะแก้ปัญหานี้อย่างมีประสิทธิภาพมากขึ้นกัน&lt;/p&gt;&lt;p&gt;โค้ดที่จะใช้ตรวจสอบว่า “ผลลัพธ์ของ &lt;code&gt;local_maxima&lt;/code&gt; (Version 5) จะเป็นวัตถุ iterator ที่ไม่ว่างเปล่าหรือไม่”
อย่างมีประสิทธิภาพ สามารถเขียนได้ดังนี้&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;local_maxima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;  &lt;span class="c1"&gt;# from version 5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The table contains at least 1 local maximum.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;The table has no local maxima.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;h2&gt;&lt;a class="headeranchor" id="bthsrupsngthaay"&gt;&lt;/a&gt;บทสรุปส่งท้าย&lt;a class="headerlink" href="#bthsrupsngthaay" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;บทความนี้ได้นำเสนอวิธีการต่าง&amp;hairsp;ๆ ที่จะช่วยทำให้การทำงานกับ for statement และวัตถุ iterable
จนกลายออกมาเป็นโค้ดที่อ่านง่าย ดูสละสลวย และมีประสิทธิภาพที่ดี&lt;/p&gt;&lt;p&gt;เมื่อใดก็ตามที่เราจะต้องทำงานกับ for statement หรือวัตถุ iterable เราอาจจะถามคำถามต่อไปนี้กับตนเอง&lt;/p&gt;&lt;ol&gt;&lt;li&gt;มีโค้ดส่วนใดที่เกี่ยวข้องกับ iteration
        ที่สามารถแยกออกเป็นฟังก์ชันต่างหากที่รีเทิร์นค่าออกมาเป็นวัตถุ iterator หรือไม่?&lt;/li&gt;&lt;li&gt;มีโค้ดส่วนใดที่เดิมรีเทิร์นค่าเป็น list
        แล้วจะมีโอกาสให้โค้ดมีประสิทธิภาพดีขึ้นหากเราเปลี่ยนให้รีเทิร์นเป็นวัตถุ iterator หรือไม่?&lt;/li&gt;&lt;li&gt;มีฟังก์ชันใน Python standard library ใดที่จะช่วยให้การทำงานกับวัตถุ iterable ง่ายขึ้นหรือไม่? &amp;nbsp;
        (&amp;hairsp;&lt;strong&gt;คำแนะนำ:&lt;/strong&gt;&amp;hairsp; สามารถค้นหาฟังก์ชันเหล่านี้เพิ่มเติมได้จากแพ็กเกจ
        &lt;a href="https://docs.python.org/3/library/itertools.html"&gt;itertools&lt;/a&gt; และ
        &lt;a href="https://more-itertools.readthedocs.io/en/stable/api.html"&gt;more-itertools&lt;/a&gt;
        เป็นต้น)&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;และขอปิดท้ายด้วยโค้ดเวอร์ชันสุดท้ายของฟังก์ชันนี่เราได้พยายามปรับปรุงให้ดียิ่งขึ้น&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;local_maxima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ndarray&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    An iterator of table indices where each value is a local maximum&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    in the given table data when comparing to adjacent table cells&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    (either horizontally, vertically, or diagonally).&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;table_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;nbr_pos&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;               &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nbr_pos&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;adjacent_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;table_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    An iterator of indices for all cells in a table with a given shape&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    which is a tuple of number of rows and columns, respectively.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;n_rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_rows&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_cols&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;adjacent_cells&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;main_pos&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Iterator&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;]]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    An iterator of indices of all adjacent cells to the cell indicated by&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    the provided main pos, subject to the given shape of the table.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;n_rows&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;main_pos&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nbr_i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nbr_i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class="k"&gt;continue&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;nbr_i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_rows&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n_cols&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;                &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;nbr_i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nbr_j&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;... &lt;/span&gt;                 &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;... &lt;/span&gt;                 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;... &lt;/span&gt;                 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local_maxima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;[(1, 0), (1, 2), (3, 3)]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;local_maxima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;True&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;plains&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;... &lt;/span&gt;                   &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;local_maxima&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plains&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;False&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;ป.ล. บทความนี้อาจจะยาวกว่าปกติ ต้องขออภัยมา ณ ที่นี้ &amp;nbsp;
ขอขอบคุณเพื่อน&amp;hairsp;ๆ ที่เสียสละเวลาอ่าน draft ของบทความและให้ feedback เพื่อใช้ปรับปรุงบทความนี้ให้ดียิ่งขึ้น &amp;nbsp;
และขอขอบคุณผู้อ่านทุกอ่านที่อ่านบทความจนจบครับ&lt;/p&gt;&lt;p&gt;ในบทความถัด&amp;hairsp;ๆ ไปจะขอเว้นจากการเขียนเกี่ยวกับ Python Iterables สักพักหนี่ง
แต่อาจจะพูดถึงหัวข้อที่ advance มากขึ้น หรืออาจจะพูดถึงเรื่องบันเทิงอื่น&amp;hairsp;ๆ บ้างตามประสา โปรดติดตามชม&lt;/p&gt;</content><category term="coding"></category><category term="python"></category><category term="iterators"></category></entry><entry><title>For Statements – Python Iterables Part 1 of N</title><link href="https://abhabongse.github.io/posts/python-iterables-part-1/" rel="alternate"></link><published>2019-06-05T00:00:00+07:00</published><updated>2019-06-05T00:00:00+07:00</updated><author><name>Abhabongse Janthong</name></author><id>tag:abhabongse.github.io,2019-06-05:/posts/python-iterables-part-1/</id><summary type="html">&lt;p&gt;ตอนแรกอยากเปิด blog ด้วยหัวข้อบันเทิงหน่อย ๆ แต่เผอิญได้ไอเดียเขียนเรื่องจริงจังระหว่างที่ทำงานอยู่
เลยได้เรื่องเขียนเกี่ยวกับของที่เจอบ่อยอย่าง for loop ในภาษา Python เสียหน่อยแล้วกัน&lt;/p&gt;&lt;p&gt;เคยสังเกตไหมว่า for statement ในภาษา Python จะใช้งานกับ …&lt;/p&gt;</summary><content type="html">&lt;p&gt;ตอนแรกอยากเปิด blog ด้วยหัวข้อบันเทิงหน่อย ๆ แต่เผอิญได้ไอเดียเขียนเรื่องจริงจังระหว่างที่ทำงานอยู่
เลยได้เรื่องเขียนเกี่ยวกับของที่เจอบ่อยอย่าง for loop ในภาษา Python เสียหน่อยแล้วกัน&lt;/p&gt;&lt;p&gt;เคยสังเกตไหมว่า for statement ในภาษา Python จะใช้งานกับ
&amp;hairsp;&lt;em&gt;iterable&lt;/em&gt;&amp;hairsp; &amp;hairsp;&lt;strong&gt;เพียงอย่างเดียวเท่านั้น&lt;/strong&gt;&amp;hairsp; (ถ้างงกับประโยคนี้ อ่านข้ามไปก่อน) &amp;nbsp;
ซึ่งจะแตกต่างจากหลาย ๆ ภาษาที่ for statement ที่มักใช้ประโยคเงื่อนไข (conditional clause) เพื่อตรวจสอบเงื่อนไขของการซ้ำลูป&lt;/p&gt;&lt;p&gt;ตัวอย่างการใช้งาน for statement ในภาษา C ซึ่งมี &lt;code&gt;i &amp;lt; n&lt;/code&gt; เป็น conditional clause
&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;// Find a product of n integers in array A&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;accm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;accm&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="p"&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;accm&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/p&gt;&lt;p&gt;มือใหม่หลาย ๆ คนที่พยายามจะแปลงโค้ดข้างต้นเป็นภาษา Python อาจจะเขียนโค้ดในลักษณะดังต่อไปนี้&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="c1"&gt;# Find the product of all integers in the list A&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;accm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# accumulated product&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;accm&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;accm&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;“นี่ไง! ค่าของตัวแปร &lt;code&gt;i&lt;/code&gt; จะวิ่งไล่จาก &lt;code&gt;0&lt;/code&gt; จนถึง &lt;code&gt;len(A) - 1&lt;/code&gt;
ซึ่งตรงตามเงื่อนไขเดียวกับโปรแกรมภาษา C++ ข้างบนเลย (เมื่อกำหนดให้ &lt;code&gt;n == len(A)&lt;/code&gt;)”&lt;/p&gt;&lt;p&gt;หากเรากำลังพูดถึงการเปลี่ยนแปลงค่าของตัวเแปร &lt;code&gt;i&lt;/code&gt; ใน for statement เป็นหลักแล้ว คำกล่าวข้างต้นนี้ถูกต้องเลยทีเดียว &amp;nbsp;
&amp;hairsp;&lt;em&gt;แต่ว่า&lt;/em&gt;&amp;hairsp; กลไกของ for statement ของทั้งสองโปรแกรมนี้กลับแตกต่างกันโดยสิ้นเชิง&lt;/p&gt;&lt;p&gt;ก่อนที่เราจะพูดถึงกลไกการทำงานของ for statement ในภาษา Python เรามาปรับปรุงโค้ดข้างต้นเสียหน่อยดีกว่า
(ซึ่งผู้อ่านบางท่านอาจจะตั้งข้อสังเกตไว้แล้ว)&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Version 2&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="c1"&gt;# Find the product of all integers in the list values&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;accm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;accm&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;accm&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;สังเกตว่า for statement ของเราในโค้ดนี้ &lt;code&gt;v&lt;/code&gt; จะแทนจำนวนแต่ละจำนวนในลิสต์ &lt;code&gt;values&lt;/code&gt; &amp;nbsp;
แต่ถ้าพิจารณาในละเอียดยิ่งขึ้น จะพบว่า &lt;code&gt;values&lt;/code&gt; ไม่จำเป็นต้องเป็นลิสต์ก็ได้ เช่น&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;  &lt;span class="c1"&gt;# list&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;210&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;  &lt;span class="c1"&gt;# set&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;6&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;# tuple&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;36&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  &lt;span class="c1"&gt;# dict keys&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;120&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;  &lt;span class="c1"&gt;# dict values&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;720&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# same as dict keys&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;120&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;product(range(1, 10, 2))  # range&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;945&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;... &lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="gp"&gt;... &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# generator expression&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="go"&gt;945&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;“เดี๋ยวนะ! ชักจะไปกันใหญ่แล้วหละ! แล้วทำไมโค้ดพวกนี้ถึงใช้กับค่าพวกนี้ได้ทั้งหมดเลยหละ?”
&lt;small&gt;(ซึ่งหากลองย้อนกลับไปดูย่อหน้าแรก ๆ ของบทความนี้จะมีคำใบ้อยู่)&lt;/small&gt;&lt;/p&gt;&lt;p&gt;ใช่แล้ว! ค่า &lt;code&gt;values&lt;/code&gt; เหล่านี้ล้วนแต่เป็น iterable ทั้งนั้น&lt;/p&gt;&lt;p&gt;&amp;hairsp;&lt;em&gt;หมายความว่าอย่างไร?&lt;/em&gt;&amp;hairsp; &amp;hairsp;&lt;strong&gt;เจตนารมณ์&lt;/strong&gt;&amp;hairsp;ของ iterable ในภาษา Python ก็คือวัตถุที่สามารถไล่เรียกดูสมาชิกแต่ละตัวได้
ไม่ว่าจะเป็น built-in data types อย่าง &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt;, etc.
หรือแม้แต่วัตถุอื่น ๆ เช่น &lt;code&gt;range&lt;/code&gt; หรือ generator expression และอื่น ๆ อีกมากมายเองก็เกิดเป็น iterable เช่นกัน&lt;/p&gt;&lt;p&gt;ในกรณีของ &lt;code&gt;range(start, stop, step)&lt;/code&gt;&lt;label for="sidenote-7feb1ca4b550" class="margin-toggle sidenote-number"&gt;&lt;/label&gt;&lt;input type="checkbox" id="sidenote-7feb1ca4b550" class="margin-toggle"/&gt;&lt;span class="sidenote"&gt;&lt;a href="https://docs.python.org/3/library/stdtypes.html#ranges"&gt;See documentation&lt;/a&gt;&lt;/span&gt;
เองนั้นจะก่อเกิด iterable ที่มีค่าเริ่มจาก &lt;code&gt;start&lt;/code&gt;
ไปจนถึงก่อนค่า &lt;code&gt;stop&lt;/code&gt; โดยนับกระโดดข้ามทีละ &lt;code&gt;step&lt;/code&gt; นั่นเอง&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;ใน&amp;hairsp;&lt;strong&gt;เชิงสเปก&lt;/strong&gt;&amp;hairsp;ของภาษา Python นั้น วัตถุทุกชิ้นที่มี method ชื่อ &lt;code&gt;__iter__(self)&lt;/code&gt;
    สร้างไว้ล้วนแต่เป็น iterable ทั้งสิ้น
    และเมื่อพูดถึง for statement แล้ว สิ่งแรกที่เกิดขึ้นเมื่อเริ่มรัน for statement ก็คือการเรียก
    method &lt;code&gt;__iter__(self)&lt;/code&gt; นี้นี่เอง&lt;/p&gt;&lt;p&gt;และเมื่อ method &lt;code&gt;__iter__(self)&lt;/code&gt; ถูกเรียกใช้งาน
    มันจะรีเทิร์นค่าออกมาเป็นวัตถุอีกชิ้นหนึ่งซึ่งเรียกว่า iterator &amp;nbsp;
    และเจ้า iterator นี่เองก็จะมี method ชื่อ &lt;code&gt;__next__(self)&lt;/code&gt; กำหนดไว้เช่นกัน
    ซึ่งทุก ๆ ครั้งที่เรียก method นี้ซ้ำ ๆ กันจึงจะคืนค่าสมาชิกแต่ละตัวตามลำดับ&lt;/p&gt;&lt;p&gt;&amp;hairsp;&lt;strong&gt;หมายเหตุ:&lt;/strong&gt;&amp;hairsp; แนวคิดนี้มีความใกล้เคียงกับ
    &lt;code&gt;java.lang.Iterable&lt;/code&gt; และ
    &lt;code&gt;java.util.Iterator&lt;/code&gt;&lt;label for="sidenote-7feb1ca4bbb0" class="margin-toggle sidenote-number"&gt;&lt;/label&gt;&lt;input type="checkbox" id="sidenote-7feb1ca4bbb0" class="margin-toggle"/&gt;&lt;span class="sidenote"&gt;See references &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Iterable.html"&gt;here&lt;/a&gt; and &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html"&gt;here&lt;/a&gt;&lt;/span&gt;
    สำหรับคนที่ใช้ภาษา Java มาก่อน&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;อย่าเพิ่งตกใจไป! ทั้ง method &lt;code&gt;__iter__&lt;/code&gt; และ &lt;code&gt;__next__&lt;/code&gt; ที่กล่าวมาข้างต้นนั้น
ผู้พัฒนาภาษา Python ได้นำไปสเปกเหล่านี้ใช้สร้าง data types
(อย่าง &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;dict&lt;/code&gt;, etc.)
หรือแม้แต่ &lt;code&gt;range&lt;/code&gt; ที่เราใช้งานกันอยู่ทุกวัน เพื่ออำนวยความสะดวกผู้ใช้ภาษา Python นั่นเอง &amp;nbsp;
โดยส่วนใหญ่แล้ว เรามักไม่มีเหตุผลที่จะต้องเขียน method &lt;code&gt;__iter__&lt;/code&gt; หรือ &lt;code&gt;__next__&lt;/code&gt; เอง
เว้นเสียแต่เราจะประกาศสร้าง data type ขึ้นใช้งานเองเพิ่มเติม&lt;/p&gt;&lt;p&gt;นอกจากนี้ ยังมีวิธีต่าง ๆ มากมายที่ Python สร้างสรรค์ไว้ให้ผู้ใช้งานภาษา Python สามารถสร้าง iterable ขึ้นใช้งานเองได้
(อย่างเช่น Generator expression ดังที่ปรากฏข้างต้น) โดยไม่ต้องไปยุ่มย่ามกับ
method &lt;code&gt;__iter__&lt;/code&gt; หรือ &lt;code&gt;__next__&lt;/code&gt;&lt;/p&gt;&lt;p&gt;ในเมื่อเราทราบแล้วว่าโค้ดของฟังก์ชัน &lt;code&gt;product&lt;/code&gt; ข้างต้นนั้นสามารถใช้งานกับ iterable ของจำนวนเต็มในรูปแบบใด ๆ ก็ได้
เราจะปรับปรุงโค้ดนี้ให้ชัดเจนขึ้นว่า &lt;code&gt;values&lt;/code&gt; สามารถเป็น iterable แบบใดก็ได้ ซึ่งได้ผลดังนี้&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Version 3&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    Return the product of all integers of a given iterable.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;accm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;accm&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;accm&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;เมื่อคุ้นชินกับการใช้งาน iterable สักพักหนึ่งแล้ว เราอาจจะเขียนฟังก์ชันเดียวกันนี้โดยใช้
&lt;code&gt;functools.reduce&lt;/code&gt;&lt;label for="sidenote-7feb1ca521c0" class="margin-toggle sidenote-number"&gt;&lt;/label&gt;&lt;input type="checkbox" id="sidenote-7feb1ca521c0" class="margin-toggle"/&gt;&lt;span class="sidenote"&gt;&lt;a href="https://docs.python.org/3/library/functools.html#functools.reduce"&gt;See documentation&lt;/a&gt;&lt;/span&gt;
ซึ่ง consume iterable โดยตรง จึงได้เป็นโค้ดใหม่ดังนี้&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;operator&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Version 4&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Iterable&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    Return the product of all integers of a given iterable.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="c1"&gt;# may also write &amp;#39;lambda a, b: a * b&amp;#39; instead of operator.mul&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;functools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;เรายังมีคำถามที่ยังค้างคาอยู่คำถามหนึ่ง เราลองกลับไปดูโค้ดภาษา Python อันแรกของเราอีกครั้ง&lt;/p&gt;&lt;div class="highlight"&gt;&lt;div class="highlight-wrapper"&gt;&lt;table class="highlight-table"&gt;&lt;tbody&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Original version&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="c1"&gt;# Find the product of all integers in the list A&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="n"&gt;accm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# accumulated product&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;        &lt;span class="n"&gt;accm&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr class="highlight-line-noop"&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;accm&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;p&gt;จะพบว่า &lt;code&gt;range&lt;/code&gt; ที่ใช้ในโค้ดนี้จะเกิดเป็นวัตถุ iterable ที่มีสมาชิกเป็น
&lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt;, …, &lt;code&gt;len(A)-1&lt;/code&gt; ตามลำดับ
จากนั้นเราจึงใช้จำนวนเหล่านั้นเพื่อ index ค่าภายในลิสต์ &lt;code&gt;A&lt;/code&gt; อีกทอดหนึ่ง
(สังเกตดี ๆ ว่าเรายังทำงานกับวัตถุที่เป็น iterable อย่างไม่มีข้อยกเว้น)&lt;/p&gt;&lt;p&gt;หวังว่าจะทำให้ผู้ใช้งาน Python หลายท่านมองเห็นภาพการทำงานของ for statement มากขึ้น &amp;nbsp;
ในบทความถัดไปจะพูดถึงการสร้าง iterable ด้วยวิธีต่าง ๆ และการนำมาใช้อำนวยความสะดวกในการเขียนโปรแกรม
ซึ่งจะทำให้โค้ดของเราเข้าใจง่ายขึ้นตามไปด้วย&lt;/p&gt;&lt;p&gt;&amp;hairsp;&lt;strong&gt;หมายเหตุ:&lt;/strong&gt;&amp;hairsp; มีรายละเอียดหลายประการที่เกี่ยวข้องกับหัวข้อนี้ ซึ่งผู้เขียนไม่สามารถกล่าวถึงได้ทั้งหมดภายในบทความเดียว จึงขออภัยมา ณ ที่นี้&lt;/p&gt;&lt;h2&gt;&lt;a class="headeranchor" id="apedteruuenguuen"&gt;&lt;/a&gt;อัปเดตเรื่องอื่น ๆ&lt;a class="headerlink" href="#apedteruuenguuen" title="Permalink to this headline"&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;สัปดาห์หน้ามีแพลนจะไปเที่ยวประเทศญี่ปุ่น อีเวนท์สำคัญก็คือคอนเสิร์ต
&lt;a href="https://www.eventernote.com/events/168195"&gt;Yuki Kajiura LIVE vol.#15 〜Soundtrack Special at the Amphitheater〜&lt;/a&gt;
ทั้งวันที่ 15 และ 16 มิถุนายนเลย และสัปดาห์ถัดไปก็ยังมี&lt;a href="https://www.thailandphil.com/events/symphonic-anime/"&gt;คอนเสิร์ตคล้าย ๆ กันของไทย&lt;/a&gt;ด้วย
คงจะมีรีวิวเร็ว ๆ นี้แน่นอน&lt;/p&gt;</content><category term="coding"></category><category term="python"></category><category term="iterators"></category></entry></feed>